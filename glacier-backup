#!/usr/bin/env python
#
# glacier-backup
#
# The AWS credentials are read from the ~/.aws.conf file, which is in INI
# format.  I believe an improvement would be to use IAM Role credentials
# instead, but that requires assigning that role to the instance during
# creation time, and it's already too late for that for what I wrote this
# for.
#
# Oct. 29, 2014 - Martin McGreal
#

import sys
import os
import argparse
import pwd
import ConfigParser
import eventlet
from boto.glacier.layer1 import Layer1
from boto.glacier.vault import Vault
from boto.glacier.concurrent import ConcurrentUploader


def connect(access_key, secret_key):
    """Return a connection to the Glacier vault."""
    return Layer1(access_key, secret_key)

def upload(conn, archive):
    """Upload the given archive to the vault using the connection conn."""
    if os.path.isdir(archive):
        files = os.listdir(archive)
        pool = eventlet.GreenPool(len(files))

        # Spawn eventlets to back up each member of the directory
        g = []
        for f in files:
            if args.verbose:
                print("GreenPool Free: %d" % pool.free())
                print("GreenPool Running: %d" % pool.running())
                print("GreenPool Waiting: %d" % pool.waiting())
            g.append(pool.spawn(upload, conn, os.path.normpath(archive+'/'+f)))

        # Collect the results
        for t in g:
            aid = t.wait()
            if args.verbose:
                print("Archive ID: %s" % aid)

    else:
        # Validate that the given archive file exists.
        if not os.access(archive, os.R_OK):
            print("ERROR: "+archive+" is unreadable.")
            return None
 
        if args.verbose:
            print("Uploading "+archive)
        return ConcurrentUploader(conn, args.vault, args.chunksize).upload(archive, archive)



# Parse the command-line args
parser = argparse.ArgumentParser()
parser.add_argument('archive', type=str, nargs='*', help="Specify the name of the archive file to upload.")
parser.add_argument('--vault', '-a', dest='vault', type=str, default='HRSE-Backup', help="Specify the name of the vault.")
parser.add_argument('--chunksize', '-c', type=int, default=32768, help="Specify the upload chunk size.")
parser.add_argument('--inventory', '-i', action='store_true', help="Initiate an inventory against the vault.")
parser.add_argument('--verbose', '-v', action='store_true', help="Initiate an inventory against the vault.")
args = parser.parse_args()

# Read the AWS credentials from the ~/.aws.conf file.
pwent = pwd.getpwuid(os.getuid())
homedir = pwent.pw_dir
cp = ConfigParser.ConfigParser()
cp.read([os.path.expanduser(homedir+'/.aws.conf')])
access_key = cp.get('glacier', 'access_key')
secret_key = cp.get('glacier', 'secret_key')

# Connect to the Glacier vault
v = connect(access_key, secret_key)

# If it's just an inventory job, do that.
if args.inventory:
    vault = Vault(conn)
    if args.verbose:
        print("Inventory job ID: %s\n" % vault.retrieve_inventory())

if not args.archive:
    sys.exit(0)

# Upload the archive(s)
for a in args.archive:
    aid = upload(v, a)

# Print the returned archive ID.
if args.verbose:
    print("Archive ID: %s" % (str(aid)))

sys.exit(0)

