#!/usr/bin/env python
#
# glacier-backup
#
# The AWS credentials are read from the ~/.aws.conf file, which is in INI
# format.  I believe an improvement would be to use IAM Role credentials
# instead, but that requires assigning that role to the instance during
# creation time, and it's already too late for that for what I wrote this
# for.
#
# Oct. 29, 2014 - Martin McGreal
#

import sys
import os
import argparse
import pwd
import ConfigParser
import eventlet
from boto.glacier.layer1 import Layer1
from boto.glacier.layer2 import Layer2
from boto.glacier.concurrent import ConcurrentUploader



def upload(conn, archive):
    """Upload the given archive to the vault using the connection conn."""
    if os.path.isdir(archive):
        files = os.listdir(archive)
        pool = eventlet.GreenPool(len(files))

        # Spawn eventlets to back up each member of the directory
        g = []
        for f in files:
            if args.verbose:
                print("GreenPool Free: %d" % pool.free())
                print("GreenPool Running: %d" % pool.running())
                print("GreenPool Waiting: %d" % pool.waiting())
            g.append(pool.spawn(upload, conn, os.path.normpath(archive+'/'+f)))

        # Collect the results
        for t in g:
            aid = t.wait()
            if args.verbose:
                print("Archive ID: %s" % aid)

    else:
        # Validate that the given archive file exists.
        if not os.access(archive, os.R_OK):
            print("ERROR: "+archive+" is unreadable.")
            return None
 
        if args.verbose:
            print("Uploading "+archive)
        return ConcurrentUploader(conn, args.vault, args.chunksize).upload(archive, archive)



# Parse the command-line args
parser = argparse.ArgumentParser()
parser.add_argument('archive', type=str, nargs='*', help="Specify the name of the archive file to upload.")
parser.add_argument('--vault', '-a', dest='vault', type=str, default=None, help="Specify the name of the vault.")
parser.add_argument('--chunksize', '-c', type=int, default=32768, help="Specify the upload chunk size.")
parser.add_argument('--inventory', '-i', action='store_true', help="Initiate an inventory against the vault.")
parser.add_argument('--list-vaults', '-l', dest='listvaults', action='store_true', help="List vaults.")
parser.add_argument('--list-jobs', '-j', dest='listjobs', action='store_true', help="List jobs.")
parser.add_argument('--get-job-output', '-g', dest='getjoboutput', type=str, default=None, help="Specify the job ID for which to pull results.")
parser.add_argument('--create-vault', '-n', dest='createvault', action='store_true', help="Create a new vault.")
parser.add_argument('--delete-vault', '-d', dest='deletevault', action='store_true', help="Delete a vault.")
parser.add_argument('--verbose', '-v', action='store_true', help="Initiate an inventory against the vault.")
args = parser.parse_args()

# Read the AWS credentials from the ~/.aws.conf file.
pwent = pwd.getpwuid(os.getuid())
homedir = pwent.pw_dir
cp = ConfigParser.ConfigParser()
cp.read([os.path.expanduser(homedir+'/.aws.conf')])
access_key = cp.get('glacier', 'access_key')
secret_key = cp.get('glacier', 'secret_key')


# Connect to the Glacier vault
layer1 = Layer1(access_key, secret_key)
layer2 = Layer2(access_key, secret_key)

# List the vaults
if args.listvaults:
    if args.verbose:
        print("Retrieving list of vaults...")

    results = layer1.list_vaults()
    fmt = "%-12s %-18s %-12s %-26s %-10s"
    print(fmt % ("VaultName", "NumberOfArchives", "SizeInBytes", "LastInventoryDate", "VaultARN"))
    for v in results['VaultList']:
        print(fmt % (v['VaultName'], v['NumberOfArchives'], v['SizeInBytes'], v['LastInventoryDate'], v['VaultARN']))

    sys.exit(0)

# From here on, the vault argument is a requirement.
if args.vault is None:
    print("You must use the --vault/-a argument to perform the requested operation.")
    sys.exit(1)

# Create a new vault
if args.createvault:
    if args.verbose:
        print("Creating a new vault called "+args.vault)
    vault = layer2.create_vault(args.vault)
    if vault:
        print("Done.")
    else:
        print("Error: layer2.create_vault operation returned None.")

# Delete a vault
if args.deletevault:
    if args.verbose:
        print("Deleting "+args.vault)
    vault = layer2.delete_vault(args.vault)
    print("delete_vault operation returned: "+str(vault))

    sys.exit(0)

# If it's just an inventory job, do that.
if args.inventory:
    if args.verbose:
        print("Retrieving vault "+args.vault)
    vault = layer2.get_vault(args.vault)
    if args.verbose:
        print("Initiating inventory for vault: "+args.vault)
    iid = vault.retrieve_inventory()
    if args.verbose:
        print("Inventory job ID: %s" % iid)

# List any outstanding jobs
if args.listjobs:
    if args.verbose:
        print("Retrieving list of jobs...")
    results = layer1.list_jobs(args.vault)

    fmt = "%-20s %-12s %-92s"
    print(fmt % ("Action", "StatusCode", "JobId"))
    print(fmt % ('-'*18, '-'*10, '-'*92))
    for j in results['JobList']:
        print(fmt % (j['Action'], j['StatusCode'], j['JobId']))

# Get job output for job X
if args.getjoboutput:
    if args.verbose:
        print("Retrieving job output for job ID %s" % args.jobid)
    print layer1.get_job_output(args.vault, args.jobid)

if not args.archive:
    sys.exit(0)

# Upload the archive(s)
for a in args.archive:
    aid = upload(layer1, a)

# Print the returned archive ID.
if args.verbose:
    print("Archive ID: %s" % (str(aid)))

sys.exit(0)

